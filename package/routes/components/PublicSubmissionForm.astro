---
import { routeGenerator } from 'astro-feedback:routes';
import { db } from 'astro:db';
import { TurnstileWidget } from 'astro-turnstile/components';
// import { TURNSTILE_SITE_KEY } from 'astro:env/client';
import { tsProject } from '../../db/tsTables';
import { getLangFromUrl, useTranslatedPath, useTranslations } from '../i18n';
import getUser from '../lib/getUser';
import RedirectButton from './RedirectButton.astro';
import Heading from './headings/Heading.astro';
import GetIcon from './icons/GetIcon.astro';

// Get the user data from the Astro locals
const { user: UserData } = await getUser(Astro);

// Get the current projects from the database
const currentProjects = await db.select().from(tsProject);

// Check if there is a default project
const defaultProject = currentProjects.filter(({ defaultProject }) => defaultProject).length > 0;

// Get the language and translations
const referer = Astro.request.headers.get('referer');

if (!referer) {
	throw new Error('No referer found');
}

const lang = getLangFromUrl(new URL(referer));
const t = useTranslations(lang, 'components/public-submission-form');
const translatePath = useTranslatedPath(lang);
const {
	base: { index },
	api: { captcha, submissions },
} = routeGenerator();
---
<form id="feedback-submissions" method="POST" class="card-body" action={submissions}>

    <div class="flex flex-col gap-4 pb-4">

        <label for="project" class="form-control">

            <span class="sr-only">{t('select-project-title')}</span>
            
            <div class="label gap-6 pb-6">
                <Heading class="label-text" tag={'h3'}>
                    <span class="text-secondary flex items-top">
                        <span class="flex items-center gap-2">
                            <GetIcon icon={'project'} class='h-[1.5rem] w-[1.5rem]'/>
                            {t('select-project-title')}
                        </span>
                        <GetIcon icon={'asterisk'} class='text-red-600 h-[0.7rem] w-[0.7rem]'/>
                    </span>
                </Heading>
            </div>

            <select 
                name="projectId" 
                form="feedback-submissions" 
                class="select select-info select-bordered"
                required
                >
                {
                    defaultProject ? (
                        <option disabled>{t('select-project-title')}</option>
                    ) : (
                        <option disabled selected>{t('select-project-title')}</option>
                    )
                }
                {
                    currentProjects.length > 0 ?
                    currentProjects.map(({ 
                        id, title, defaultProject, submissionsOpen 
                    }) => submissionsOpen && (
                         <option value={id} selected={defaultProject}>{title}</option>
                    )) : (
                        <option disabled>{t('select-project-unavailble')}</option>
                    )
                }
            </select>
        </label>

    </div>
            
    <div class="flex flex-col gap-6 pb-6">
                    
        <Heading tag={'h3'}>
            <span class="text-secondary flex items-center gap-2">
                <GetIcon icon={'mail'} class='h-[1.5rem] w-[1.5rem]'/>
                {t('email')}
            </span>
        </Heading>
                    
        <label for="email" class="input input-bordered input-info flex items-center gap-2">

            <span class="sr-only">{t('email')}</span>

            <input 
                name="email" 
                form="feedback-submissions" 
                type="email"
                class="w-full"
                value={UserData?.email}
                placeholder="john.doe@gmail.com"
                />

        </label>
    </div>
            
    <div class="flex flex-col gap-6 pb-6">
                    
        <Heading tag={'h3'}>
            <span class="text-secondary flex items-top">
                <span class="text-secondary flex items-center gap-2">
                    <GetIcon icon={'subject'} class='h-[1.5rem] w-[1.5rem]'/>
                    {t('subject')}
                </span>
                <GetIcon icon={'asterisk'} class='text-red-600 h-[0.7rem] w-[0.7rem]'/>
            </span>
        </Heading>
                    
        <label for="subject" class="input input-bordered input-info flex items-center gap-2">

            <span class="sr-only">{t('subject-sr')}</span>

            <input 
                name="subject" 
                form="feedback-submissions" 
                type="text" 
                class="w-full"
                placeholder={t('subject-placeholder')}
                required
                />

        </label>
    </div>
            
    <div class="flex flex-col gap-6 pb-6">
        <Heading tag={'h3'}>
            <span class="text-secondary flex items-top">
                <span class="flex items-center gap-2">
                    <GetIcon icon={'feedback'} class='h-[1.5rem] w-[1.5rem]'/>
                    {t('feedback-body')}
                </span>
                <GetIcon icon={'asterisk'} class='text-red-600 h-[0.7rem] w-[0.7rem]'/>
            </span>
        </Heading>

        <textarea 
            name="body" 
            form="feedback-submissions" 
            class="textarea textarea-info h-32" 
            placeholder={t('feedback-body-placeholder')}
            required
            />
    </div>

    <input type="hidden" name="userId" value={UserData?.id}>

    <TurnstileWidget size={'normal'}/>

    <div class="flex flex-row pt-6">
        <div class="flex-none">
            <button class="btn btn-primary font-extrabold flex items-center" type="submit">
                <span>{t('submit')}</span>
                <GetIcon icon={'submit'} class='h-[1.2rem] w-[1.2rem]'/>
                <span id="buttonloader" class="loading loading-bars loading-md"></span>
            </button>
        </div>

        <div class="flex-2 grow"/>

        <div class="flex-none">
            <RedirectButton link={translatePath(index)}>
                <span class="btn btn-error btn-outline flex items-center">
                    <GetIcon icon={'back'} class='h-[1.2rem] w-[1.2rem]'/>
                    <span>{t('back')}</span>
                </span>
            </RedirectButton>
        </div>
    </div>
</form>

<div style="display: none;" id="captchaPath" data-url={new URL(captcha, Astro.site).href}></div>

<div 
    id="ui-components-feedback-form-error-captcha-failed" 
    style="display: none;"
    >{t('alert-captcha-failed')}</div>
<div 
    id="ui-components-feedback-form-error-feedback-failed" 
    style="display: none;"
    >{t('error-feedback-failed')}</div>

<style>
    #buttonloader {
        display: none;
    }

    #form-error {
        display: none;
        position: fixed;
        top: 5rem;
        place-self: center;
        width: max-content;
        transition: fade 0.5s ease-in-out;
    }

    #form-success {
        display: none;
        position: fixed;
        top: 5rem;
        place-self: center;
        width: max-content;
        transition: fade 0.5s ease-in-out;
    }
</style>

<script is:inline>
    const form = document.getElementById('feedback-submissions');
    const buttonLoader = document.getElementById('buttonloader');

    // Get i18n strings
    const captchaErrorText = document.getElementById('ui-components-feedback-form-error-captcha-failed');
    const feedbackErrorText = document.getElementById('ui-components-feedback-form-error-feedback-failed');

    form.addEventListener('submit', async (event) => {
        event.preventDefault();
        buttonLoader.style.display = 'inline-block';

        const formData = new FormData(form);

        const url = (document.getElementById('captchaPath')).dataset.url;

        try {
            const verifyData = await fetch(new URL(url), {
                method: 'POST',
                body: formData,
            });

            console.log("Verify Data:", verifyData);

            if (verifyData.status !== 200) {
                console.log(captchaErrorText.textContent);
                const toast = document.createElement('toast-message');
                toast.innerText = captchaErrorText.textContent;
                toast.setAttribute('dismissible', 'true');
        
                document.body.appendChild(toast);
                return;
            }

            const submission = await fetch(form.action, {
                method: form.method,
                body: formData,
            });

            console.log("Submission:", submission);

            if (submission.status === 200) {
                const response = await submission.json();

                console.log("Response:", response);
                buttonLoader.style.display = 'none';
                form.reset();
                const toast = document.createElement('toast-message');
                toast.innerText = response.message;
                toast.setAttribute('dismissible', 'true');
        
                document.body.appendChild(toast);
            } else {
                buttonLoader.style.display = 'none';
                const toast = document.createElement('toast-message');
                toast.innerText = feedbackErrorText.textContent;
                toast.setAttribute('dismissible', 'true');
        
                document.body.appendChild(toast);
            }

        } catch (error) {
            buttonLoader.style.display = 'none';
            const toast = document.createElement('toast-message');
            toast.innerText = captchaErrorText.textContent;
            toast.setAttribute('dismissible', 'true');
        
            document.body.appendChild(toast);
        }
    });
</script>
