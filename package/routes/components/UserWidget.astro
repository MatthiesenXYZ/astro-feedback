---
import routes from 'astro-feedback:routes';
import { Image } from 'astro:assets';
import getUser from '../lib/getUser';
import GetIcon from './icons/GetIcon.astro';
import DialogHeader from './userWidgetParts/DialogHeader.astro';
import { getUserMetadata } from './userWidgetParts/GetMeta';
import MatchedProjectsSection from './userWidgetParts/MatchedProjectsSection.astro';
import OpenSubmissionsSection from './userWidgetParts/OpenSubmissionsSection.astro';
import type { Props as QuickActionsProps } from './userWidgetParts/QuickActionButtons.astro';
import QuickActionsSection from './userWidgetParts/QuickActionsSection.astro';

// Get the user data from the Astro locals
const { isLoggedIn, user } = await getUser(Astro);

// Get the user metadata
const { matchedProjects, matchedSubmissions, userAvatar } = await getUserMetadata(user);

// Define the quick action buttons
const quickActionButtons: Array<QuickActionsProps['quickAction']> = [
	{
		label: 'Dashboard',
		link: routes.portal.index,
		icon: 'dashboard',
		color: 'btn-primary',
	},
	{
		label: 'View Profile',
		link: `${routes.portal.users.index}/${user?.id}`,
		icon: 'profile',
		color: 'btn-secondary',
	},
	{
		label: 'View Projects',
		link: routes.portal.projects.index,
		icon: 'project',
		color: 'btn-accent',
	},
	{
		label: 'Logout',
		link: routes.portal.logout,
		icon: 'logout',
		color: 'btn-error',
	},
];
---
<div class="indicator">
    <button 
        id="avatar_button"
        class="avatar-button tooltip tooltip-bottom tooltip-accent font-bold mr-2" 
        data-tip={`${user && user.name}`}
        data-isloggedin={isLoggedIn ? 'true' : 'false'}
        >
        <Image 
            src={userAvatar} 
            height={128} 
            width={128} 
            loading={'eager'}
            inferSize
            alt={`${user && user.name}`}
            class="w-full h-full object-cover rounded-full"
            />
            { matchedSubmissions.length > 0 && 
                <span 
                    class="open-submissions indicator-item indicator-bottom indicator-center badge badge-sm badge-info"
                    >{matchedSubmissions.length}
                </span> 
            }
    </button>
</div>

<menu id="user_panel_menu" type="context" class="bg-neutral rounded-md p-2">

    <button 
        id="user_panel_menu_open" 
        class="btn btn-primary" 
        type="button">
        <GetIcon icon={'profile'} class='h-[1.2rem] w-[1.2rem] inline'/>    
        Open User Panel
    </button>
    
    <button 
        id="user_panel_menu_dashboard" 
        class="btn btn-secondary" 
        type="button" 
        data-route={routes.portal.index}>
        <GetIcon icon={'dashboard'} class='h-[1.2rem] w-[1.2rem] inline'/>
        Dashboard
    </button>
    
    <button 
        id="user_panel_menu_logout" 
        class="btn btn-error" 
        type="button" 
        data-route={routes.portal.logout}>
        <GetIcon icon={'logout'} class='h-[1.2rem] w-[1.2rem] inline'/>    
        Logout
    </button>

    {/* Cancel Button */}
    <div class="flex flex-row-reverse">
        <button id="user_panel_menu_cancel" class="btn btn-sm btn-circle btn-outline text-neutral-content" type="button">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>
    </div>
</menu>

<dialog id="user_panel" class="modal modal-bottom sm:modal-middle">
    <div class="modal-box min-w-[100vw] sm:min-w-[80vw] max-w-5xl min-h-[40vh] max-h-[90vh]">

        <DialogHeader UserAvatar={userAvatar} user={user} />

        <div class="divider my-4" />

        <div class="flex flex-col md:flex-row w-full">

            <OpenSubmissionsSection matchedSubmissions={matchedSubmissions} routes={routes} />

            <div class="flex-none divider md:divider-horizontal mx-2" />

            <QuickActionsSection quickActionButtons={quickActionButtons} />

            <div class="flex-none divider md:divider-horizontal mx-2" />

            <MatchedProjectsSection matchedProjects={matchedProjects} routes={routes} />

        </div>

        <div class="divider my-4" />

        {/* Footer */}

    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>
    
<script is:inline>
    // Ensure the state of the menu element
    function ensureState(element, state) {
        element.style.display = state;
    }

    // Get the Avatar Button
    const avatar = document.getElementById('avatar_button');
    const userPanel = document.getElementById('user_panel');
    const userPanelMenu = document.getElementById('user_panel_menu');
    const userPanelOpen = document.getElementById('user_panel_menu_open');
    const userPanelDashboard = document.getElementById('user_panel_menu_dashboard');
    const userPanelLogout = document.getElementById('user_panel_menu_logout');
    const userPanelCancel = document.getElementById('user_panel_menu_cancel');

    // Check if the user is logged in
    const isLoggedIn = avatar.dataset.isloggedin;

    // Show the Avatar Button if the user is logged in
    if (isLoggedIn === 'true') {
        // Fade in the Avatar Button
        setTimeout(() => {
            avatar.style.display = 'block';
            setTimeout(() => {
                avatar.style.opacity = "1";
            }, 250);
        }, 200);
    }

    avatar.addEventListener('click', () => {
        userPanelMenu.style.display = 'none';
        userPanel.showModal();
    });

    avatar.addEventListener('contextmenu', (e) => {
        e.preventDefault();
        if (userPanelMenu.style.display === 'none') {
            userPanelMenu.style.display = 'flex';
        } else {
            userPanelMenu.style.display = 'none';
        }
    });

    userPanelOpen.addEventListener('click', () => {
        userPanelMenu.style.display = 'none';
        userPanel.showModal();
    });

    userPanelDashboard.addEventListener('click', () => {
        userPanelMenu.style.display = 'none';
        window.location.href = userPanelDashboard.dataset.route;
    });

    userPanelLogout.addEventListener('click', () => {
        userPanelMenu.style.display = 'none';
        window.location.href = userPanelLogout.dataset.route;
    });

    userPanelCancel.addEventListener('click', () => {
        userPanelMenu.style.display = 'none';
    });
</script>

<style>
    .open-submissions {
        position: relative;
        top: -60px;
        left: -2px;
        font-weight: 700;
        height: 1.5rem;
        width: 1.5rem;
        border: 0.125rem solid;
        z-index: 99999;
    }

    .avatar-button {
        background-color: oklch(var(--b2));
        border-radius: 50%;
        border: 0.125rem solid;
        border-color: oklch(var(--a));
        box-shadow: 0 0 0.25rem 0.015rem rgba(0, 0, 0, 0.694);
        width: 2.5rem;
        height: 2.5rem;
        cursor: pointer;
        display: none;
        opacity: 0;
        z-index: 99998;
        transition: opacity 1s ease;
    }

    #user_panel_menu {
        position: absolute;
        display: none;
        flex-direction: column;
        gap: 0.5rem;
        left: -10rem;
        top: 3rem;
        width: 13rem;
        z-index: 99999;
    }

    #user_panel_menu_cancel {
        border-radius: 50%;
    }
</style>